% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_speaker_landscapes.R, R/prepapre_data.R
\name{plot_speaker_landscapes}
\alias{plot_speaker_landscapes}
\title{Plot Speaker Landscapes}
\usage{
plot_speaker_landscapes(
  speaker_landscape,
  size_points = 0.3,
  alpha_points = 0.3,
  categories = NULL
)

plot_speaker_landscapes(
  speaker_landscape,
  size_points = 0.3,
  alpha_points = 0.3,
  categories = NULL
)
}
\arguments{
\item{speaker_landscape}{A \code{list} object returned by the \code{make_speaker_landscapes}
function, containing the UMAP-reduced coordinates for both speakers (\code{$speakers})
and words (\code{$words}). This list must contain columns named \code{X1} and \code{X2}
for coordinates.}

\item{size_points}{A numeric value specifying the size of the speaker points in the plot.
This controls the visual prominence of individual speakers. Defaults to \code{.3}.}

\item{alpha_points}{A numeric value specifying the transparency (alpha) of the
speaker points in the plot (ranging from 0.0 for fully transparent to 1.0 for opaque).
A low alpha value is often recommended when plotting dense speaker data to reveal
cluster density and overlap. Defaults to \code{.3}.}

\item{categories}{Optional: A data frame or tibble with columns named \code{author}
(containing speaker identifiers that match the training data) and a column named
\code{categories} (containing the categorical classification or grouping for those speakers).
If supplied, the speaker points are colored according to these categories, and a legend is displayed.
Defaults to \code{NULL}.}
}
\value{
A \code{ggplot} object visualizing the UMAP reduction.

A \code{ggplot} object visualizing the UMAP reduction. This object can be further
customized or saved using standard \code{ggplot2} functions.
}
\description{
Takes the UMAP coordinates generated by \code{make_speaker_landscapes} and creates
a scatter plot visualizing the distribution of speakers, optionally colored
by category, and labeled by key word tokens.

Takes the UMAP coordinates generated by \code{make_speaker_landscapes} and creates
a scatter plot visualizing the distribution of speakers, optionally colored
by category, and labeled by key word tokens.
}
\details{
This function generates the final visualization of the embedding analysis. The plot displays
the two-dimensional mapping of the vector space, where distance represents \strong{semantic similarity}.

\strong{Interpretation Components:}
\itemize{
\item \strong{Speaker Points:} Each point represents a unique speaker, positioned based on their overall
linguistic profile. Dense clusters indicate groups of speakers who share similar vocabulary
and contextual patterns. The \strong{alpha transparency} is deliberately low by default to allow
visual aggregation of these clusters.
\item \strong{Word Labels:} The black text labels represent key tokens (e.g., specific terms, names, or n-grams)
that were projected into the same space. The proximity of a speaker cluster to a word label
suggests that the speakers in that cluster use that word or related words in a \strong{contextually similar way}
to define their overall voice.
\item \strong{Styling:} The plot utilizes a minimal theme, explicitly suppressing axis titles, text, ticks,
and grid lines. This decision centers the viewer's attention entirely on the relative
positioning of points and labels, reinforcing the interpretation of the map as a \strong{semantic landscape}.
}
}
\examples{
\dontrun{
library(ggplot2)
library(dplyr)

# --- Placeholder Data Structures (matching make_speaker_landscapes output) ---
# Assume 'landscape_data' was generated by make_speaker_landscapes()
landscape_data <- list(
  speakers = tibble::tibble(author = c("A", "B", "C", "D"), n_quotes = 10, X1 = 1:4, X2 = 4:1),
  words = tibble::tibble(words = c("cat", "dog"), X1 = c(2.5, 3.5), X2 = c(3.5, 2.5))
)

# Example 1: Basic plot
plot_speaker_landscapes(landscape_data)

# Example 2: Plot with categories
speaker_categories <- tibble::tibble(
  author = c("A", "B", "C", "D"),
  categories = c("Group 1", "Group 2", "Group 1", "Group 2")
)
plot_speaker_landscapes(landscape_data, categories = speaker_categories)
}
\dontrun{
library(ggplot2)
library(dplyr)

# --- Placeholder Data Structures (matching make_speaker_landscapes output) ---
# Assume 'landscape_data' was generated by make_speaker_landscapes()
landscape_data <- list(
  speakers = tibble::tibble(author = c("A", "B", "C", "D"), n_quotes = 10, X1 = 1:4, X2 = 4:1),
  words = tibble::tibble(words = c("cat", "dog"), X1 = c(2.5, 3.5), X2 = c(3.5, 2.5))
)

# Example 1: Basic plot
plot_speaker_landscapes(landscape_data)

# Example 2: Plot with categories
speaker_categories <- tibble::tibble(
  author = c("A", "B", "C", "D"),
  categories = c("Group 1", "Group 2", "Group 1", "Group 2")
)
plot_speaker_landscapes(landscape_data, categories = speaker_categories)

# Example 3: Customized plot using ggplot2 piping
plot_speaker_landscapes(landscape_data) +
  ggplot2::labs(title = "UMAP Speaker & Word Landscape") +
  ggplot2::scale_color_brewer(palette = "Set1")
}
}
